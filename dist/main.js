/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ (function() {

eval("// main\n\n// document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n//     anchor.addEventListener(\"click\", function(e){\n//         e.preventDefault();\n//         document.querySelector(this.getAttribute(\"href\")).scrollIntoview({\n//             behavior : \"smooth\"\n//         })\n//     })\n// })\n\nlet circle = document.getElementById(\"circle\");\nlet up = document.getElementById(\"up\");\nlet down = document.getElementById(\"down\");\nlet rotateValue = circle.style.transform; //CSS property \n\nlet rotateSum;\nup.onclick = function () {\n  rotateSum = rotateValue + \"rotate(-90deg)\";\n  circle.style.transform = rotateSum; // Creates a rotation of -90 degrees to the circle\n  rotateValue = rotateSum;\n};\ndown.onclick = function () {\n  rotateSum = rotateValue + \"rotate(90deg)\";\n  circle.style.transform = rotateSum; // Creates a rotation of 90 degrees to the circle\n  rotateValue = rotateSum;\n};\n\n//scroll\n\n// images\nconst textOverImage = document.querySelectorAll(\".onClickTextOverImage div\"); //div with image inside\n\nlet previousText;\nfor (let i = 0; i < textOverImage.length; i++) {\n  textOverImage[i].onclick = function () {\n    //when clicking on the image\n    let classes = this.classList; //classes = window properties\n    if (classes.contains(\"show\")) {\n      //if the current image is showing\n      classes.remove(\"show\"); //when clicked on, remove the \"show\"\n    } else {\n      if (previousText != null)\n        //if the variable \"previousText\" is not equal to null\n        previousText.classList.remove(\"show\"); //remove the \"show\" property\n      previousText = this; //equal to the \"this\" object\n      classes.add(\"show\"); //show the the image text\n    }\n  };\n}\n\n// quiz\n\nconst questions = [{\n  question: \"In what country is the largest oil field located?\",\n  answers: [{\n    text: \"Saudi Arabia\",\n    correct: true\n  }, {\n    text: \"United States of America\",\n    correct: false\n  }, {\n    text: \"Venezuela\",\n    correct: false\n  }, {\n    text: \"Iran\",\n    correct: false\n  }]\n}, {\n  question: \"What is palladium named after?\",\n  answers: [{\n    text: \"Astronomer William Palladium\",\n    correct: false\n  }, {\n    text: \"Your pal ladium\",\n    correct: false\n  }, {\n    text: \"From Pallas, the second-largest asteroid in the asteroid belt\",\n    correct: true\n  }, {\n    text: \"The ancient Greek goddess Pallas Athena\",\n    correct: false\n  }]\n}, {\n  question: \"Factors that determine cattle prices\",\n  answers: [{\n    text: \"How hungry people are divided by the amount of cattles plus the cost of production\",\n    correct: false\n  }, {\n    text: \"Feed prices, goverment regulations, the increase/decrease in turism for that specific country\",\n    correct: false\n  }, {\n    text: \"Feed prices, gas prices and sweat equity\",\n    correct: false\n  }, {\n    text: \"Feed prices, weather, global demand for beef, substitution and energy prices\",\n    correct: true\n  }]\n}, {\n  question: \"When were soybeans first brought to North America\",\n  answers: [{\n    text: \"During the Civil war\",\n    correct: false\n  }, {\n    text: \"Early in the 19th century\",\n    correct: true\n  }, {\n    text: \"They were already here and indians loved it\",\n    correct: false\n  }, {\n    text: \"When soy sauce came out\",\n    correct: false\n  }]\n}];\nconst questionElement = document.getElementById(\"question\");\nconst answerButtons = document.getElementById(\"answer-buttons\");\nconst nextButton = document.getElementById(\"next-btn\");\nlet currentQuestionIndex = 0;\nlet score = 0;\nfunction startQuiz() {\n  currentQuestionIndex = 0;\n  score = 0;\n  nextButton.innerHTML = \"Next\"; //setting the next-btn to \"Next\"\n  showQuestion();\n}\nfunction showQuestion() {\n  resetState(); // it will reset the previous question and answer\n  let currentQuestion = questions[currentQuestionIndex]; // which question you are on\n  let questionNo = currentQuestionIndex + 1;\n  questionElement.innerHTML = questionNo + \". \" + currentQuestion.question; // displays the question with the question number\n\n  currentQuestion.answers.forEach(answer => {\n    const button = document.createElement(\"button\"); //created a button\n    button.innerHTML = answer.text; //putting the answers in the html buttons\n    button.classList.add(\"btn\"); //adding the button to \"btn\"\n    answerButtons.appendChild(button); //puttig the button created to each one of the questions\n    if (answer.correct) {\n      button.dataset.correct = answer.correct; //if answer is correct, set the buttons the answers[correct]\n    }\n    ;\n    button.addEventListener(\"click\", selectAnswer);\n  });\n}\n;\nfunction resetState() {\n  nextButton.style.display = \"none\"; //won't display the button\n  while (answerButtons.firstChild) {\n    answerButtons.removeChild(answerButtons.firstChild); //will remove the answers\n  }\n}\nfunction selectAnswer(e) {\n  // e is an object containing information about the event \n  const selectedBtn = e.target; //the button that was selected\n  const isCorrect = selectedBtn.dataset.correct === \"true\";\n  if (isCorrect) {\n    selectedBtn.classList.add(\"correct\"); //if the right option was chosen, add the classname correct\n    score++;\n  } else {\n    selectedBtn.classList.add(\"incorrect\");\n  }\n  Array.from(answerButtons.children).forEach(button => {\n    //it is checking each of the buttons\n    if (button.dataset.correct === \"true\") {\n      //if the answers are true\n      button.classList.add(\"correct\"); //give them a class of \"correct\"\n    }\n    button.disabled = true; //don't allow to choose anything else afterwarss\n  });\n  nextButton.style.display = \"block\";\n}\n;\nfunction showScore() {\n  resetState();\n  questionElement.innerHTML = `You scored ${score} out of ${questions.length}!`;\n  nextButton.innerHTML = \"Play Again\";\n  nextButton.style.display = \"block\";\n}\n;\nfunction handleNextButton() {\n  currentQuestionIndex++;\n  if (currentQuestionIndex < questions.length) {\n    showQuestion(); //if there are more questions, show the question\n  } else {\n    showScore(); //if there aren't any more questions show the score\n  }\n}\n;\nnextButton.addEventListener(\"click\", () => {\n  if (currentQuestionIndex < questions.length) {\n    handleNextButton(); // if there are more questions\n  } else {\n    startQuiz(); // if the questions are over and you want to restart the quiz\n  }\n});\nstartQuiz();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/index.scss":
/*!************************!*\
  !*** ./src/index.scss ***!
  \************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguc2NzcyIsIm1hcHBpbmdzIjoiO0FBQUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9qZWN0Ly4vc3JjL2luZGV4LnNjc3M/OTc0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCB7fTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	!function() {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = function(exports) {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	}();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	__webpack_modules__["./src/index.js"](0, {}, __webpack_require__);
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/index.scss"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;